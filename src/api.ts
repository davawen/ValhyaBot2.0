import * as https from 'https';
import * as querystring from 'querystring';

// import { config } from './include/config';

/*export*/ function request<T>(options: string | https.RequestOptions): Promise<T>
{
	return new Promise(
		(resolve, reject) =>
		{
			https.get(options, 
				res =>
				{
					res.setEncoding("utf-8");
					
					let rawData: any = "";
					res.on('data', chunk => rawData += chunk);
					res.on('end',
						() =>
						{
							//Check if response is JSON
							//Directly copied from Stack Overflow
							//https://stackoverflow.com/a/52799327
							
							try
							{
								const result = JSON.parse(rawData);
								const type = Object.prototype.toString.call(result);
								if(type === "[object Object]" || type === "[object Array]")
								{
									resolve(result);
								}
							}
							catch(err) //Not JSON
							{
								resolve(rawData);
							}
						}
					);
					
					res.on('error', reject);
				}
			).on('error', reject);
		}
	);
}

/**
 * @returns Response of the post request
*/
/*export */function postRequest(options: https.RequestOptions, content: any): Promise<string>
{
	const postData = querystring.stringify(content);
	
	options.method = "POST";
	
	options.headers['Content-Length'] = Buffer.byteLength(postData);
	
	return new Promise(
		(resolve, reject) =>
		{
			const req = https.request(options,
				res =>
				{
					res.setEncoding("utf-8");

					let rawData = "";
					res.on('data', chunk => rawData += chunk);
					res.on('end', () => resolve(rawData));
				}
			);
			
			req.write(postData);
			req.end();
		}
	);
}

export async function sleep(time: number): Promise<void>
{
	return new Promise(resolve => setTimeout(resolve, time));
}

//#region Youtube Api Generated by https://quicktype.io

export interface YoutubeSearchResponse
{
	kind: string;
	etag: string;
	nextPageToken: string;
	regionCode: string;
	pageInfo:
	{
		totalResults: number;
		resultsPerPage: number;
	};
	items:
	{
		kind: string;
		etag: string;
		id: {
			kind: string;
			videoId: string;
		};
		snippet: {
			publishedAt: string;
			channelId: string;
			title: string;
			description: string;
			thumbnails: {
				default: {
					url: string;
					width: number;
					height: number;
				};
				medium: {
					url: string;
					width: number;
					height: number;
				};
				high: {
					url: string;
					width: number;
					height: number;
				};
			};
			channelTitle: string;
			liveBroadcastContent: string;
			publishTime: string;
		};
	}[];
}

export interface YoutubePlaylistItemListResponse
{
	kind:          string;
	etag:          string;
	nextPageToken: string;
	items:         Item[];
	pageInfo:      PageInfo;
}

interface Item
{
	kind:           string;
	etag:           string;
	id:             string;
	contentDetails: ContentDetails;
}

interface ContentDetails
{
	videoId:          string;
	videoPublishedAt: string;
}

interface PageInfo
{
	totalResults:   number;
	resultsPerPage: number;
}

//#endregion

//#region Database Responses
export interface DatabaseStreamer
{
	name: string;
	displayName: string;
	id: string;
	/**Array of channel ids */
	channels: string[];
	date: number;
}

//#endregion
