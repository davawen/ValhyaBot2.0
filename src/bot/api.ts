import * as https from "https";
import { config } from './main';

export function request<T>(options: string | https.RequestOptions): Promise<T>
{
	return new Promise(
		(resolve, reject) =>
		{
			https.get(options, 
				res =>
				{
					res.setEncoding("utf-8");
					
					let rawData = "";
					res.on('data', chunk => rawData += chunk);
					res.on('end',
						() =>
						{
							resolve(JSON.parse(rawData));
						}
					);
					
					res.on('error', reject);
				}
			).on('error', reject);
		}
	);
}

export async function sleep(time: number): Promise<void>
{
	return new Promise(resolve => setTimeout(resolve, time));
}

//#region Youtube Api Generated by https://quicktype.io

export interface YoutubeSearchResponse
{
	kind: string;
	etag: string;
	nextPageToken: string;
	regionCode: string;
	pageInfo:
	{
		totalResults: number;
		resultsPerPage: number;
	};
	items:
	{
		kind: string;
		etag: string;
		id: {
			kind: string;
			videoId: string;
		};
		snippet: {
			publishedAt: string;
			channelId: string;
			title: string;
			description: string;
			thumbnails: {
				default: {
					url: string;
					width: number;
					height: number;
				};
				medium: {
					url: string;
					width: number;
					height: number;
				};
				high: {
					url: string;
					width: number;
					height: number;
				};
			};
			channelTitle: string;
			liveBroadcastContent: string;
			publishTime: string;
		};
	}[];
}

export interface YoutubePlaylistItemListResponse {
	kind:          string;
	etag:          string;
	nextPageToken: string;
	items:         Item[];
	pageInfo:      PageInfo;
}

interface Item {
	kind:           string;
	etag:           string;
	id:             string;
	contentDetails: ContentDetails;
}

interface ContentDetails {
	videoId:          string;
	videoPublishedAt: string;
}

interface PageInfo {
	totalResults:   number;
	resultsPerPage: number;
}

//#endregion

//#region Twitch API Generated by https://quicktype.io

export interface TwitchChannelResponse {
	data: TwitchChannelData[];
}

interface TwitchChannelData {
	broadcaster_id:       string;
	broadcaster_login:    string;
	broadcaster_name:     string;
	broadcaster_language: string;
	game_id:              string;
	game_name:            string;
	title:                string;
}

export interface TwitchUserResponse {
	data: TwitchUserData[];
}

interface TwitchUserData {
	id:                string;
	login:             string;
	display_name:      string;
	type:              string;
	broadcaster_type:  string;
	description:       string;
	profile_image_url: string;
	offline_image_url: string;
	view_count:        number;
	email:             string;
	created_at:        string;
}

//#endregion